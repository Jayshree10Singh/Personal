{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "90ab5383",
   "metadata": {},
   "source": [
    "# NUMPY ARRAY (NUM =number & PY =python)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20dae3a0",
   "metadata": {},
   "source": [
    "All kinda number operations are done using numpy.it has nothing to do with strings.\n",
    "numpy has 150+ functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5a80fe9",
   "metadata": {},
   "source": [
    "### Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bfdba0ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "##(square ,sqrt ,sin ,cos ,sum ,avg )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a5b4b119",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6e1895b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.1622776601683795"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "86d39e42",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mininum 17\n",
      "Maximum 17\n"
     ]
    }
   ],
   "source": [
    "print('Mininum',np.amin([25,17,39,46]))\n",
    "\n",
    "print('Maximum',np.amin([25,17,39,46]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a649e64b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Round off to next number\n",
    "np.ceil (29.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "eade0cf4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.ceil(np.sqrt(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "59ff5148",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.ceil(np.sum(np.sqrt([5,10,15])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "94cdc482",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 5, 19, 13])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array([5,19,13])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "93eedde9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type([5,19,13])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e49a5cc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type - int32\n",
      "\n",
      " ******************************\n",
      "\n",
      " [[1 2]\n",
      " [3 4]\n",
      " [4 5]]\n"
     ]
    }
   ],
   "source": [
    "#two dimensions\n",
    "a = np.array([[1,2],[3,4],[4,5]])\n",
    "    \n",
    "print (\"Type -\",a.dtype)\n",
    "\n",
    "print ('\\n' ,'*' *30) #\\n is for next line\n",
    "       \n",
    "print ('\\n',a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "463bafe4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 2., 3.])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dtype conversion\n",
    "np.array([1,2,3],dtype=float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "47c8001f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3],\n",
       "       [4, 5, 6]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creating arrau ysing matrix\n",
    "\n",
    "np.array(np.mat('1 2 3; 4 5 6'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0f25bd8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2]\n"
     ]
    }
   ],
   "source": [
    "#coverting list into array:\n",
    "a =[1,2]\n",
    "\n",
    "c= np.array(a)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8991169e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2]\n"
     ]
    }
   ],
   "source": [
    "#copy array into other\n",
    "b= np.asarray(c) #asarray is used to copy as it is\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cae3403",
   "metadata": {},
   "source": [
    "# Data Types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "59750a82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class of the object: <class 'numpy.ndarray'>\n",
      "Here is the matrix\n",
      "----------\n",
      " [[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]] \n",
      "----------\n",
      "Dimension of this matrix:  2\n",
      "Size of this matrix: 9\n",
      "Shape of this matrix (3, 3)\n",
      "Data type of this matrix int32\n"
     ]
    }
   ],
   "source": [
    "my_mat =[[1,2,3],[4,5,6],[7,8,9]]\n",
    "\n",
    "mat =np.array(my_mat)\n",
    "\n",
    "print(\"Class of the object:\",type(mat))\n",
    "\n",
    "print(\"Here is the matrix\\n----------\\n\",mat,\"\\n----------\")\n",
    "\n",
    "print(\"Dimension of this matrix: \",mat.ndim) #dim gives dimension ,2 for a matrix, 1 for a vector \n",
    "\n",
    "print(\"Size of this matrix:\",mat.size) #size gives the total number of elements\n",
    "\n",
    "print(\"Shape of this matrix\",mat.shape)#shape gives the no. of elements along each axes(dimension)\n",
    "\n",
    "print(\"Data type of this matrix\",mat.dtype)#dtype gives the data contained in the array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "619a761a",
   "metadata": {},
   "source": [
    "## arange and linspace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ec3135eb",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'float' object cannot be interpreted as an integer",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_12080/2521351138.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#dont work with python range\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m10.5\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m.4\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m: 'float' object cannot be interpreted as an integer"
     ]
    }
   ],
   "source": [
    "#dont work with python range\n",
    "list(range(2,10.5,.4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3db3764e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 2. ,  2.4,  2.8,  3.2,  3.6,  4. ,  4.4,  4.8,  5.2,  5.6,  6. ,\n",
       "        6.4,  6.8,  7.2,  7.6,  8. ,  8.4,  8.8,  9.2,  9.6, 10. , 10.4])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.arange(2,10.5,.4)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "eb9f188b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10.4, 10. ,  9.6,  9.2,  8.8,  8.4,  8. ,  7.6,  7.2,  6.8,  6.4,\n",
       "        6. ,  5.6,  5.2,  4.8,  4.4,  4. ,  3.6,  3.2,  2.8,  2.4,  2. ])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reverse order\n",
    "a[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2cbd2f25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Every 5th number from 50 in reverse order\n",
      "  [50 45 40 35 30 25 20 15 10  5]\n"
     ]
    }
   ],
   "source": [
    "print (\"Every 5th number from 50 in reverse order\\n \",np.arange(50,0,-5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fe10f0e",
   "metadata": {},
   "source": [
    "#### linspace = linearly/equally spaced"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4faae67f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "linearly spaced numbers between 1 and 5\n",
      "--------------------------------\n",
      "[10.  17.5 25.  32.5 40. ]\n"
     ]
    }
   ],
   "source": [
    "print(\"linearly spaced numbers between 1 and 5\\n--------------------------------\")\n",
    "print(np.linspace(10,40,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b685d9f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([2.  , 2.25, 2.5 , 2.75]), 0.25)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Include endpoint and check space between points\n",
    "#By default endpoint =True\n",
    "#bydefault retstep =False\n",
    "np.linspace(2.0,3.0,num=4 ,endpoint=False,retstep=True) #endpoint =false (coj we dont wanna include endpoint i.e,3.0)\n",
    "                                                        #retstep=retention step which will give us the steps in b/w the numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "01331da8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([ 4.5678 ,  5.13145,  5.6951 ,  6.25875,  6.8224 ,  7.38605,\n",
      "        7.9497 ,  8.51335,  9.077  ,  9.64065, 10.2043 , 10.76795,\n",
      "       11.3316 , 11.89525, 12.4589 , 13.02255, 13.5862 , 14.14985,\n",
      "       14.7135 , 15.27715, 15.8408 , 16.40445, 16.9681 , 17.53175,\n",
      "       18.0954 , 18.65905, 19.2227 , 19.78635, 20.35   , 20.91365,\n",
      "       21.4773 , 22.04095, 22.6046 , 23.16825, 23.7319 , 24.29555,\n",
      "       24.8592 , 25.42285, 25.9865 ]), 0.56365)\n"
     ]
    }
   ],
   "source": [
    "print(np.linspace(4.5678,25.9865,39, retstep=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "360b3794",
   "metadata": {},
   "source": [
    "# Matrix Creation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f5f1190",
   "metadata": {},
   "source": [
    "matrix = combo of rows and coloumn\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f6f8cd5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9e4a015c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Vector of zeroes\n",
      "------------------\n",
      "[0. 0. 0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "print(\"Vector of zeroes\\n------------------\")\n",
    "\n",
    "print(np.zeros(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "58b894d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matrix of zeroes\n",
      "------------------\n",
      "[[0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Matrix of zeroes\\n------------------\")\n",
    "\n",
    "print(np.zeros((5,6)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5ddf4a05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matrix of zeroes\n",
      "------------------\n",
      "[[1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1. 1.]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Matrix of zeroes\\n------------------\")\n",
    "\n",
    "print(np.ones((5,6)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5e272057",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matrix of 5's\n",
      "------------------\n",
      "[[5. 5. 5. 5. 5. 5.]\n",
      " [5. 5. 5. 5. 5. 5.]\n",
      " [5. 5. 5. 5. 5. 5.]\n",
      " [5. 5. 5. 5. 5. 5.]\n",
      " [5. 5. 5. 5. 5. 5.]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Matrix of 5's\\n------------------\")\n",
    "\n",
    "print(5*np.ones((5,6)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f020b33f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  1  2  3  4  5]\n",
      " [ 6  7  8  9 10 11]\n",
      " [12 13 14 15 16 17]\n",
      " [18 19 20 21 22 23]\n",
      " [24 25 26 27 28 29]]\n"
     ]
    }
   ],
   "source": [
    "#construct diagonal matrix\n",
    "x =np.arange(30).reshape(5,6) #reshaping shall be done in a way that all the 30 numbers are gonna get adjusted in that matrix\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ba121352",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "cannot reshape array of size 30 into shape (4,6)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_12024/2830317475.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m30\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m4\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m6\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m#reshaping shall be done in a way that all the 30 numbers are gonna get adjusted in that matrix\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: cannot reshape array of size 30 into shape (4,6)"
     ]
    }
   ],
   "source": [
    "x =np.arange(30).reshape(4,6) #reshaping shall be done in a way that all the 30 numbers are gonna get adjusted in that matrix\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8d7d80a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  1  2  3  4  5  6  7  8  9]\n",
      " [10 11 12 13 14 15 16 17 18 19]\n",
      " [20 21 22 23 24 25 26 27 28 29]]\n"
     ]
    }
   ],
   "source": [
    "x =np.arange(30).reshape(3,10)\n",
    "\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f10a8ab1",
   "metadata": {},
   "source": [
    "## Random Number Generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "da1b0655",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4a499a48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random number generation (from Uniform distribution)\n",
      "[[0.54340494 0.27836939 0.42451759 0.84477613 0.00471886 0.12156912]\n",
      " [0.67074908 0.82585276 0.13670659 0.57509333 0.89132195 0.20920212]\n",
      " [0.18532822 0.10837689 0.21969749 0.97862378 0.81168315 0.17194101]\n",
      " [0.81622475 0.27407375 0.43170418 0.94002982 0.81764938 0.33611195]\n",
      " [0.17541045 0.37283205 0.00568851 0.25242635 0.79566251 0.01525497]\n",
      " [0.59884338 0.60380454 0.10514769 0.38194344 0.03647606 0.89041156]\n",
      " [0.98092086 0.05994199 0.89054594 0.5769015  0.74247969 0.63018394]\n",
      " [0.58184219 0.02043913 0.21002658 0.54468488 0.76911517 0.25069523]\n",
      " [0.28589569 0.85239509 0.97500649 0.88485329 0.35950784 0.59885895]\n",
      " [0.35479561 0.34019022 0.17808099 0.23769421 0.04486228 0.50543143]]\n"
     ]
    }
   ],
   "source": [
    "np.random.seed(100) #each seed number will generate similar data ,we can write any seed number of out choice\n",
    "\n",
    "print(\"Random number generation (from Uniform distribution)\")\n",
    "(\n",
    "print(np.random.rand(10,6)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8815685d",
   "metadata": {},
   "source": [
    "when we wont be writting seed number on every click the numbers that has been generated uniformally will be getting changed ,but when we will be writting seed number we will be getting same n umbers with every click until we dont change the seed  number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b02a65a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random number generation (from Uniform distribution)\n",
      "[[0.60511204 0.55921728 0.86039419 0.91975536 0.84960733 0.25446654]\n",
      " [0.87755554 0.43513019 0.72949434 0.41264077 0.19083605 0.70601952]\n",
      " [0.24063282 0.85132443 0.82410229 0.52521179 0.38634079 0.59088079]\n",
      " [0.13752361 0.80827041 0.96582582 0.7797958  0.23933508 0.86726041]\n",
      " [0.80811501 0.06368112 0.2312283  0.58968545 0.13748695 0.6784407 ]\n",
      " [0.99219069 0.28575198 0.76091276 0.04652717 0.33253591 0.94455279]\n",
      " [0.63651704 0.60184861 0.92818468 0.18167941 0.01782318 0.19007218]\n",
      " [0.5218718  0.49582199 0.80049121 0.85943631 0.21295603 0.43726884]\n",
      " [0.42161751 0.05471738 0.00993369 0.78976568 0.27531322 0.71774   ]\n",
      " [0.42135592 0.14333587 0.19252168 0.31381523 0.80517017 0.01262583]]\n"
     ]
    }
   ],
   "source": [
    "#np.random.seed(100) #each seed number will generate similar data ,we can write any seed number of out choice\n",
    "\n",
    "print(\"Random number generation (from Uniform distribution)\")\n",
    "(\n",
    "print(np.random.rand(10,6)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ec82e84b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Numbers from Normal distribution with zero mean and stsndard deviation 1 i.e.standard normal\n",
      "[[ 0.08822993 -0.60275937  1.12555545  0.9270533  -2.26915699 -0.34817064]\n",
      " [-0.1640254   1.21658059 -0.6268539  -0.27493981  1.14745744  1.15996897]\n",
      " [ 0.70218451 -1.28390481  1.52230777 -0.17996332 -0.37614737  0.46034921]\n",
      " [ 1.45542146  0.24150689 -0.03766667  0.83153303  2.29936947 -0.93960244]\n",
      " [ 0.11182258  2.53943203  0.40359842 -1.88483439  1.27745203 -0.44558826]\n",
      " [-1.27031804  0.63550117 -0.29843567 -0.40228992 -0.53664043  0.8231244 ]\n",
      " [ 0.0251919   1.51753613  0.36961115 -0.48063216  1.04233274  1.09887599]\n",
      " [-2.13291037  0.75920433 -0.28518087  0.48041141  0.46800069  2.70900195]\n",
      " [ 2.01908612  0.74740342 -0.58970859 -0.81342482 -0.17689686  0.5070475 ]\n",
      " [-0.26677816 -0.85606202  1.55931486 -1.09268886  0.7580425  -1.19943997]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Numbers from Normal distribution with zero mean and stsndard deviation 1 i.e.standard normal\")\n",
    "(\n",
    "print(np.random.randn(10,6)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7ae0b47e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random integer vector: [ 6 18 19 17 17 13 18 12 10  9]\n"
     ]
    }
   ],
   "source": [
    "print(\"Random integer vector:\",np.random.randint(5,20,10)) #randint (low,high) (*ex of dice)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5023508c",
   "metadata": {},
   "source": [
    "here 5 and 20 is starting and ending point and 10 is the sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f433e9d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random integer Matrix\n",
      "[[10 12  7 15 10 15 23]\n",
      " [28 24  3 16 21  4 15]\n",
      " [27  8 29  1  2  3 21]\n",
      " [ 1 15  4  9  4 13 28]\n",
      " [21  6  9 19 28 12  8]\n",
      " [ 5 16  7 20 28  7  4]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Random integer Matrix\") \n",
    "print(np.random.randint(1,30,(6,7)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4da97847",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Random integer Matrix\n",
      "[[ 2 15  3 21 20 29 14]\n",
      " [17 23 10  8 24 20 12]\n",
      " [19 12  7 18 17  7 13]\n",
      " [25 28  4 27 21  1  6]\n",
      " [18  4  1  7  1  9 29]\n",
      " [17  8 23 25 12 26 11]]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nRandom integer Matrix\") \n",
    "print(np.random.randint(1,30,(6,7)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f77bff38",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Random integer Matrix\n",
      "[[13910  1606  1893   885  4573  9116  8997]\n",
      " [ 9795 19791  8520  5634 15978  4416 28732]\n",
      " [23152 14012 23108 22235  5984 24855 10205]\n",
      " [11577  3888 25270 28082 22866  5470 25714]\n",
      " [21708 28669  6503 13248 29466 28026 20468]\n",
      " [ 1956 29823  3266 28150  2043 12541  8211]]\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nRandom integer Matrix\") \n",
    "print(np.random.randint(1,30000,(6,7))) #everytime we will be running this ,it will be getting changed"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f71618c",
   "metadata": {},
   "source": [
    "### Numpy Condition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "57661f61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10, 67, 24, 68, 30, 35, 61, 12, 41, 39])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emp_salary =np.random.randint(8,70,10)\n",
    "emp_salary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "13507aa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([20, 50, 24, 50, 30, 35, 50, 20, 41, 39])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#min and max salary\n",
    "np.clip(emp_salary, a_min=20 ,a_max=50) #whosoever was getting <20k now there salary will be revised to min of 20k and similarly for max.too  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6ed7c414",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([0, 7], dtype=int64),)\n"
     ]
    }
   ],
   "source": [
    "#if you want to find actual salary which are less than or greater than some salary use np.where\n",
    "#np.where gives index details\n",
    "print (np.where(emp_salary < 20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "292548b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([67, 68, 12, 41])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#if you want to see actual data use index\n",
    "emp_salary[[1,3,7,8]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2647e696",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0296914d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d458e31",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "617b486a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
